package org.renjin.primitives.random;

import static org.junit.Assert.assertThat;
import static org.hamcrest.CoreMatchers.equalTo;

import org.junit.Before;
import org.junit.Test;
import org.renjin.EvalTestCase;
import org.renjin.primitives.random.RNG;


public class RngTest extends EvalTestCase {

  private static final double DELTA = 0.01;

  @Before
  public void setUpTests() {
    assumingBasePackagesLoad();
  }
  
  /*
   * Test for consistency of renjin generated pseudo random numbers.
   * Desired output is not generated by the original interpreter.
   */
  
  @Test
  public void RNGkind(){
	  assertThat(eval("k<-RNGkind('Mersenne-Twister', 'Inversion')"), equalTo(c("Mersenne-Twister", "Inversion")));
  }
  
  @Test
  public void runif() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("runif(1,0,2)").asReal(), closeTo(1.859, 0.01));
    assertThat(eval("mean(runif(100000,0,2))").asReal(), closeTo(1.00, 0.01));
  }

  @Test
  public void rbinom() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rbinom(1000,100,0.5))").asReal(), closeTo(49.98, DELTA));
    assertThat(eval("mean(rbinom(1000,200,0.9))").asReal(), closeTo(179.92, DELTA));
    assertThat(eval("mean(rbinom(1000,250,0.12))").asReal(), closeTo(29.91, DELTA));
  }
  
  
  @Test
  public void rsignrank() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rsignrank(1000,10))").asReal(), closeTo(27.568, DELTA));
  }
  
  @Test
  public void rwilcox() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rwilcox(10000,4,5))").asReal(), closeTo(10.02, DELTA));
  }
  
   @Test
  public void rhyper() {
    eval("set.seed(12345, 'Mersenne-Twister','I')");
    assertThat(eval("mean(rhyper(10000,17,16,13))").asReal(), closeTo(6.3212, DELTA));
  }

   @Test
   public void rnorm() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("mean(rnorm(10000,0,1))").asReal(), closeTo(0.0, DELTA));
   }
   
   @Test
   public void rgamma() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rgamma(1,2,3)").asReal(), closeTo(1.282, DELTA));
   }
   
   @Test
   public void rchisq() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rchisq(1,6)").asReal(), closeTo(10.74, DELTA));
   }
   
   @Test
   public void rexp() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rexp(1,6)").asReal(), closeTo(0.021, DELTA));
   }
   
   @Test
   public void rcauchy() {
     eval("set.seed(1235, 'Mersenne-Twister','I')");
     assertThat(eval("rcauchy(1,8,6)").asReal(), closeTo(7.122, DELTA));
   }
   
   @Test
   public void rlogis() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rlogis(1,3,4)").asReal(), closeTo(13.32, DELTA));
   }
   
   @Test
   public void rweibull() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rweibull(1,4,3)").asReal(), closeTo(1.5592, DELTA));
   }
   
   
   @Test
   public void rf() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rf(1,5,7)").asReal(), closeTo(1.0, DELTA));
   }
   
   @Test
   public void rbeta() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rbeta(1,8,6)").asReal(), closeTo(0.3319, 0.1));
   }
   
   @Test
   public void rpois() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rgamma(1,8)").asReal(), closeTo(12.07, 0.1));
   }
   
   @Test
   public void rgeom() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rgeom(1,0.5)").asReal(), closeTo(0.0, 0.1));
   }
   
   @Test
   public void rt() {
     eval("set.seed(12345, 'Mersenne-Twister','I')");
     assertThat(eval("rt(1,3)").asReal(), closeTo(3.28, 0.1));
   }
   
   @Test
   public void rmultinom(){
	   eval("set.seed(1234, 'Mersenne-Twister','I')");
	   assertThat(eval("rmultinom(1,3,c(0.5,0.5))") , equalTo(c(1,2)));
	   assertThat(eval("dim(rmultinom(20,3,c(0.5,0.3,0.2)))") , equalTo(c_i(3,20)));
   }
}
